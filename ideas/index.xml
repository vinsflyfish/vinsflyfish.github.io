<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ideas on Lufy&#39;s Blog</title>
    <link>http://vinsflyfish.github.io/ideas/</link>
    <description>Recent content in Ideas on Lufy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 04 Jun 2022 12:54:01 +0800</lastBuildDate><atom:link href="http://vinsflyfish.github.io/ideas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>最近的一些关于分享和思考的一些想法</title>
      <link>http://vinsflyfish.github.io/ideas/efficient-study/</link>
      <pubDate>Sat, 04 Jun 2022 12:54:01 +0800</pubDate>
      
      <guid>http://vinsflyfish.github.io/ideas/efficient-study/</guid>
      <description>稍微整理下最近看到的一些学习方法 日常学习看书，往往要看几遍才能对概念保持长时间的记忆。这样的方式缺点是耗费时间且缺乏明确的重点。对于比较缺乏时间或者专注力的情况下，通读不那么费神，结果也相对低效。 读到的某篇文章的思想，只有输入，没有输出这样的效率有影响。这两天一直再回顾过去学习过程中的一些场景，在思考没有输出是否形成了过去学习过程中关键性的 输出如何定义： 看完能总结出大纲，关键的知识点要能回顾 能总结出来，并且写下来。 对于比较实践化的内容，最好能转化为小的project，只有实际上项目验证，才能对特别的用法或者边界理解的清楚，本质上是一个较高强度的知识强化过程。 分享的一些经历 写到这里，回顾下工作的</description>
    </item>
    
    <item>
      <title>复杂系统维护和开发一点思考</title>
      <link>http://vinsflyfish.github.io/ideas/think-about-cooperate/</link>
      <pubDate>Fri, 03 Jun 2022 10:37:18 +0800</pubDate>
      
      <guid>http://vinsflyfish.github.io/ideas/think-about-cooperate/</guid>
      <description>思考过程尽量避免无关紧要的case，以及短期限制因素。 大型系统开发，改动和设计如果急于赶工期，会出现某个人的改动会带来大的问题，问题的根源可能很简单，但是问题扩散的比较远。 团队管理如何降低这种风险，同时为项目降低风险。如果项目里出现过于自我的人，一旦“偷偷的”修改了某处核心的流程， 而且没有经过充分的测试验证或者没有覆盖好当前的业务场景，那么这一次的修改是相当可怕的。 实际上我们偶尔心血来潮，看到过去写的幼稚代码，顺手给改掉也时有发生。 对于已经足够庞杂的系统，这种习惯可能是致命的。 过去以往某个改动，要经过无数个人的review，一直觉得麻烦，甚至产生了能不改就不改这样怕麻烦的隐藏心里。 在发现其他人</description>
    </item>
    
  </channel>
</rss>
